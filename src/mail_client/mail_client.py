"""
Mail Client Application - ·ª®ng d·ª•ng qu·∫£n l√Ω email chuy√™n d·ª•ng
T√°c gi·∫£: Python Senior Software Engineer
Phi√™n b·∫£n: 2.0.0 - Enhanced Error Handling
"""

import poplib
import imaplib
import smtplib
import ssl
import os
import re
import time
import traceback
import sys
from email import message_from_bytes, message_from_string, policy
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from email.header import decode_header
from datetime import datetime
from pathlib import Path
from typing import List, Tuple, Optional
from dotenv import load_dotenv
import socket

try:
    from plyer import notification

    PLYER_AVAILABLE = True
except ImportError:
    PLYER_AVAILABLE = False
    print("‚ö†Ô∏è  Th∆∞ vi·ªán 'plyer' ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Th√¥ng b√°o desktop s·∫Ω kh√¥ng kh·∫£ d·ª•ng.")
    print("   C√†i ƒë·∫∑t b·∫±ng l·ªánh: pip install plyer")


# Enable debug mode t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
DEBUG_MODE = os.getenv("DEBUG_MODE", "False").lower() == "true"


def log_error(error_msg: str, exception: Exception = None, show_trace: bool = True):
    """
    Log l·ªói chi ti·∫øt v·ªõi traceback

    Args:
        error_msg: Th√¥ng b√°o l·ªói
        exception: Exception object
        show_trace: C√≥ hi·ªÉn th·ªã traceback kh√¥ng
    """
    print(f"\n{'='*70}")
    print(f"‚ùå L·ªñI: {error_msg}")
    print(f"{'='*70}")

    if exception:
        print(f"üîç Lo·∫°i l·ªói: {type(exception).__name__}")
        print(f"üìù Chi ti·∫øt: {str(exception)}")

    if show_trace and (DEBUG_MODE or exception):
        print(f"\nüìç TRACEBACK:")
        print(f"{'-'*70}")
        if exception:
            traceback.print_exc()
        else:
            traceback.print_stack()
        print(f"{'-'*70}")

    print(f"{'='*70}\n")


def safe_execute(func, error_msg: str, *args, **kwargs):
    """
    Th·ª±c thi function v·ªõi error handling an to√†n

    Args:
        func: Function c·∫ßn th·ª±c thi
        error_msg: Th√¥ng b√°o l·ªói n·∫øu th·∫•t b·∫°i
        *args, **kwargs: Arguments cho function

    Returns:
        Tuple (success: bool, result: any)
    """
    try:
        result = func(*args, **kwargs)
        return True, result
    except Exception as e:
        log_error(error_msg, e)
        return False, None


class MailClient:
    """
    L·ªõp qu·∫£n l√Ω email client v·ªõi c√°c ch·ª©c nƒÉng:
    - G·ª≠i email v·ªõi ƒë√≠nh k√®m
    - Nh·∫≠n v√† l∆∞u email offline
    - ƒê·ªçc email ƒë√£ l∆∞u
    - Gi√°m s√°t t·ª± ƒë·ªông v·ªõi th√¥ng b√°o
    """

    def __init__(self, cipher_level: str = "auto"):
        """
        Kh·ªüi t·∫°o Mail Client v√† load c·∫•u h√¨nh t·ª´ file .env

        Args:
            cipher_level: M·ª©c ƒë·ªô b·∫£o m·∫≠t cipher
                - 'auto': T·ª± ƒë·ªông (m·∫∑c ƒë·ªãnh, SECLEVEL=1)
                - 'strict': Nghi√™m ng·∫∑t (SECLEVEL=2, an to√†n nh·∫•t)
                - 'legacy': T∆∞∆°ng th√≠ch c≈© (cho server r·∫•t c≈©)
        """
        load_dotenv()
        self.cipher_level = cipher_level

        # ƒê·ªçc c·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
        self.mail_host = os.getenv("MAIL_HOST")
        self.mail_port = int(os.getenv("MAIL_PORT", 995))
        self.smtp_server = os.getenv("SMTP_SERVER")
        self.smtp_port = int(os.getenv("SMTP_PORT", 465))
        self.mail_user = os.getenv("MAIL_USER")
        self.mail_pass = os.getenv("MAIL_PASS")

        # Auto-detect protocol d·ª±a v√†o port
        self.protocol = self._detect_protocol(self.mail_port)

        # Ki·ªÉm tra c·∫•u h√¨nh
        if not all([self.mail_host, self.smtp_server, self.mail_user, self.mail_pass]):
            raise ValueError("‚ùå Thi·∫øu th√¥ng tin c·∫•u h√¨nh trong file .env")

        # Thi·∫øt l·∫≠p th∆∞ m·ª•c l∆∞u tr·ªØ
        self.storage_dir = Path("D:\\root_folder\\rieng\\emails_offline")
        self.storage_dir.mkdir(exist_ok=True)

        # File theo d√µi UID ƒë√£ t·∫£i
        self.seen_uids_file = self.storage_dir / ".seen_uids"
        self.seen_uids = self._load_seen_uids()

        # C·∫•u h√¨nh SSL v·ªõi cipher suite t∆∞∆°ng th√≠ch r·ªông
        # Gi·∫£i quy·∫øt l·ªói handshake failure v·ªõi server c≈©
        self.ssl_context = ssl.create_default_context()
        self.ssl_context.minimum_version = ssl.TLSVersion.TLSv1_2

        # C·∫•u h√¨nh cipher suite d·ª±a tr√™n m·ª©c ƒë·ªô y√™u c·∫ßu
        cipher_configs = {
            "strict": "DEFAULT:@SECLEVEL=2",  # B·∫£o m·∫≠t cao nh·∫•t
            "auto": "DEFAULT:@SECLEVEL=1",  # C√¢n b·∫±ng (khuy·∫øn ngh·ªã)
            "legacy": "ALL:@SECLEVEL=0",  # T∆∞∆°ng th√≠ch t·ªëi ƒëa
        }

        cipher_string = cipher_configs.get(self.cipher_level, cipher_configs["auto"])

        try:
            self.ssl_context.set_ciphers(cipher_string)
            print(f"üîê SSL Context: {self.cipher_level} mode")
        except ssl.SSLError as e:
            print(f"‚ö†Ô∏è  C·∫£nh b√°o c·∫•u h√¨nh cipher: {e}")
            print("   S·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh")

        print("‚úÖ Mail Client ƒë√£ s·∫µn s√†ng!")
        print(f"üìß Protocol: {self.protocol.upper()}")

    def _detect_protocol(self, port: int) -> str:
        """
        T·ª± ƒë·ªông ph√°t hi·ªán protocol d·ª±a v√†o port
        """
        if port == 993 or port == 143:
            return "imap"
        elif port == 995 or port == 110:
            return "pop3"
        else:
            # M·∫∑c ƒë·ªãnh POP3
            print(f"‚ö†Ô∏è  Port {port} kh√¥ng chu·∫©n, gi·∫£ ƒë·ªãnh d√πng POP3")
            return "pop3"

    def _load_seen_uids(self) -> set:
        """ƒê·ªçc danh s√°ch UID ƒë√£ t·∫£i t·ª´ file"""
        if self.seen_uids_file.exists():
            with open(self.seen_uids_file, "r") as f:
                return set(line.strip() for line in f if line.strip())
        return set()

    def _save_seen_uid(self, uid: str):
        """L∆∞u UID m·ªõi v√†o file tracking"""
        self.seen_uids.add(uid)
        with open(self.seen_uids_file, "a") as f:
            f.write(f"{uid}\n")

    def _decode_header_value(self, header_value: str) -> str:
        """
        Gi·∫£i m√£ header email c√≥ th·ªÉ ch·ª©a k√Ω t·ª± Unicode
        V√≠ d·ª•: =?UTF-8?B?...?= -> text th√¥ng th∆∞·ªùng
        """
        if not header_value:
            return ""

        decoded_parts = decode_header(header_value)
        result = []

        for part, encoding in decoded_parts:
            if isinstance(part, bytes):
                result.append(part.decode(encoding or "utf-8", errors="replace"))
            else:
                result.append(str(part))

        return "".join(result)

    def _sanitize_filename(self, filename: str, max_length: int = 50) -> str:
        """
        L√†m s·∫°ch t√™n file/folder, lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
        """
        # Lo·∫°i b·ªè k√Ω t·ª± kh√¥ng h·ª£p l·ªá cho t√™n file
        filename = re.sub(r'[<>:"/\\|?*]', "", filename)
        filename = filename.strip()

        # Gi·ªõi h·∫°n ƒë·ªô d√†i
        if len(filename) > max_length:
            filename = filename[:max_length]

        return filename or "no_subject"

    def _extract_attachments(self, msg, folder: Path) -> int:
        """
        Tr√≠ch xu·∫•t v√† l∆∞u t·∫•t c·∫£ file ƒë√≠nh k√®m
        Tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng file ƒë√£ l∆∞u
        """
        count = 0

        for part in msg.walk():
            # B·ªè qua ph·∫ßn kh√¥ng ph·∫£i attachment
            if part.get_content_maintype() == "multipart":
                continue
            if part.get("Content-Disposition") is None:
                continue

            filename = part.get_filename()
            if filename:
                # Gi·∫£i m√£ t√™n file n·∫øu c·∫ßn
                filename = self._decode_header_value(filename)
                filename = self._sanitize_filename(filename, max_length=100)

                filepath = folder / filename

                # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p tr√πng t√™n file
                counter = 1
                original_filepath = filepath
                while filepath.exists():
                    name, ext = os.path.splitext(original_filepath.name)
                    filepath = folder / f"{name}_{counter}{ext}"
                    counter += 1

                # L∆∞u file
                with open(filepath, "wb") as f:
                    f.write(part.get_payload(decode=True))

                count += 1
                print(f"   üìé ƒê√≠nh k√®m: {filename}")

        return count

    def _get_email_body(self, msg) -> str:
        """
        Tr√≠ch xu·∫•t n·ªôi dung text t·ª´ email
        ∆Øu ti√™n text/plain, fallback sang text/html
        """
        body = ""

        if msg.is_multipart():
            for part in msg.walk():
                content_type = part.get_content_type()
                content_disposition = str(part.get("Content-Disposition"))

                # B·ªè qua attachment
                if "attachment" in content_disposition:
                    continue

                if content_type == "text/plain":
                    try:
                        body = part.get_payload(decode=True).decode(errors="replace")
                        break
                    except:
                        pass
                elif content_type == "text/html" and not body:
                    try:
                        body = part.get_payload(decode=True).decode(errors="replace")
                    except:
                        pass
        else:
            try:
                body = msg.get_payload(decode=True).decode(errors="replace")
            except:
                body = str(msg.get_payload())

        return body.strip()

    def send_email(
        self,
        to_addr: str,
        subject: str,
        body: str,
        attachments: Optional[List[str]] = None,
    ):
        """
        G·ª≠i email v·ªõi kh·∫£ nƒÉng ƒë√≠nh k√®m nhi·ªÅu file

        Args:
            to_addr: ƒê·ªãa ch·ªâ email ng∆∞·ªùi nh·∫≠n
            subject: Ti√™u ƒë·ªÅ email
            body: N·ªôi dung email
            attachments: Danh s√°ch ƒë∆∞·ªùng d·∫´n file ƒë√≠nh k√®m
        """
        try:
            # T·∫°o message
            msg = MIMEMultipart()
            msg["From"] = self.mail_user
            msg["To"] = to_addr
            msg["Subject"] = subject

            # Th√™m n·ªôi dung
            msg.attach(MIMEText(body, "plain", "utf-8"))

            # X·ª≠ l√Ω ƒë√≠nh k√®m
            if attachments:
                for filepath in attachments:
                    if not os.path.exists(filepath):
                        print(f"‚ö†Ô∏è  File kh√¥ng t·ªìn t·∫°i: {filepath}")
                        continue

                    filename = os.path.basename(filepath)

                    with open(filepath, "rb") as f:
                        part = MIMEBase("application", "octet-stream")
                        part.set_payload(f.read())

                    encoders.encode_base64(part)
                    part.add_header(
                        "Content-Disposition", f"attachment; filename= {filename}"
                    )
                    msg.attach(part)
                    print(f"   üìé ƒê√£ ƒë√≠nh k√®m: {filename}")

            # K·∫øt n·ªëi v√† g·ª≠i qua SMTP v·ªõi SSL
            with smtplib.SMTP_SSL(
                self.smtp_server, self.smtp_port, context=self.ssl_context
            ) as server:
                server.login(self.mail_user, self.mail_pass)
                server.send_message(msg)

            print(f"‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn {to_addr}")

        except smtplib.SMTPAuthenticationError:
            print("‚ùå L·ªói x√°c th·ª±c: Ki·ªÉm tra l·∫°i email v√† m·∫≠t kh·∫©u")
        except smtplib.SMTPException as e:
            print(f"‚ùå L·ªói SMTP: {e}")
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")

    def diagnose_ssl_connection(self):
        """
        C√¥ng c·ª• ch·∫©n ƒëo√°n k·∫øt n·ªëi SSL/TLS
        Ki·ªÉm tra cipher suite v√† protocol ƒë∆∞·ª£c h·ªó tr·ª£
        """
        print("\nüîç CH·∫®N ƒêO√ÅN K·∫æT N·ªêI SSL")
        print("=" * 60)

        # Th√¥ng tin SSL context hi·ªán t·∫°i
        print(f"\nüìã C·∫•u h√¨nh hi·ªán t·∫°i:")
        print(f"   Protocol: {self.protocol.upper()}")
        print(f"   Cipher level: {self.cipher_level}")
        print(f"   Min TLS version: {self.ssl_context.minimum_version}")
        print(f"   Cipher suites: {len(self.ssl_context.get_ciphers())} available")

        # Test k·∫øt n·ªëi d·ª±a v√†o protocol
        if self.protocol == "imap":
            print(
                f"\nüîå ƒêang test k·∫øt n·ªëi IMAP t·ªõi {self.mail_host}:{self.mail_port}..."
            )
            self._diagnose_imap()
        else:
            print(
                f"\nüîå ƒêang test k·∫øt n·ªëi POP3 t·ªõi {self.mail_host}:{self.mail_port}..."
            )
            self._diagnose_pop3()

    def _diagnose_imap(self):
        """Ch·∫©n ƒëo√°n k·∫øt n·ªëi IMAP"""
        test_results = []
        cipher_modes = ["strict", "auto", "legacy"]

        for mode in cipher_modes:
            try:
                ctx = ssl.create_default_context()
                ctx.minimum_version = ssl.TLSVersion.TLSv1_2

                cipher_configs = {
                    "strict": "DEFAULT:@SECLEVEL=2",
                    "auto": "DEFAULT:@SECLEVEL=1",
                    "legacy": "ALL:@SECLEVEL=0",
                }
                ctx.set_ciphers(cipher_configs[mode])

                with poplib.POP3_SSL(
                    self.mail_host, self.mail_port, context=ctx, timeout=10
                ) as conn:
                    conn.user(self.mail_user)
                    conn.pass_(self.mail_pass)
                    test_results.append((mode, "‚úÖ Th√†nh c√¥ng"))
                    print(f"   [{mode}] ‚úÖ K·∫øt n·ªëi th√†nh c√¥ng")

            except poplib.error_proto as e:
                test_results.append((mode, f"‚ùå Auth Error: {str(e)[:50]}"))
                print(f"   [{mode}] ‚ö†Ô∏è  K·∫øt n·ªëi OK nh∆∞ng l·ªói x√°c th·ª±c")
            except ssl.SSLError as e:
                test_results.append((mode, f"‚ùå SSL Error: {str(e)[:50]}"))
                print(f"   [{mode}] ‚ùå L·ªói SSL")
            except Exception as e:
                test_results.append((mode, f"‚ùå {str(e)[:50]}"))
                print(f"   [{mode}] ‚ùå L·ªói kh√°c")

                # Test k·∫øt n·ªëi IMAP
                conn = imaplib.IMAP4_SSL(
                    self.mail_host, self.mail_port, ssl_context=ctx, timeout=10
                )

                # Test login
                conn.login(self.mail_user, self.mail_pass)
                conn.logout()

                test_results.append((mode, "‚úÖ Th√†nh c√¥ng"))
                print(f"   [{mode}] ‚úÖ K·∫øt n·ªëi v√† x√°c th·ª±c th√†nh c√¥ng")

            except imaplib.IMAP4.error as e:
                error_msg = str(e)
                print(f"   [{mode}] ‚ùå L·ªói IMAP: {error_msg[:60]}")

                if DEBUG_MODE:
                    print(f"        Traceback:")
                    traceback.print_exc()

                if "authenticate" in error_msg.lower() or "login" in error_msg.lower():
                    test_results.append(
                        (mode, f"‚ö†Ô∏è  SSL OK, Auth failed: {error_msg[:40]}")
                    )
                else:
                    test_results.append((mode, f"‚ùå IMAP Error: {error_msg[:50]}"))

            except ssl.SSLError as e:
                error_msg = str(e)
                print(f"   [{mode}] ‚ùå L·ªói SSL: {error_msg[:60]}")

                if DEBUG_MODE:
                    print(f"        Traceback:")
                    traceback.print_exc()

                test_results.append((mode, f"‚ùå SSL Error: {error_msg[:50]}"))

            except socket.timeout:
                print(f"   [{mode}] ‚ùå Timeout - Server kh√¥ng ph·∫£n h·ªìi")
                test_results.append((mode, "‚ùå Connection timeout"))

            except socket.gaierror as e:
                print(f"   [{mode}] ‚ùå Kh√¥ng resolve ƒë∆∞·ª£c hostname: {e}")
                test_results.append((mode, f"‚ùå DNS Error: {e}"))

            except ConnectionRefusedError:
                print(f"   [{mode}] ‚ùå K·∫øt n·ªëi b·ªã t·ª´ ch·ªëi")
                test_results.append((mode, "‚ùå Connection refused"))

            except Exception as e:
                error_msg = str(e)
                error_type = type(e).__name__
                print(f"   [{mode}] ‚ùå L·ªói {error_type}: {error_msg[:60]}")

                if DEBUG_MODE:
                    print(f"        Full traceback:")
                    traceback.print_exc()

                test_results.append((mode, f"‚ùå {error_type}: {error_msg[:40]}"))

        self._print_diagnosis_results(test_results)

    def _print_diagnosis_results(self, test_results):
        """In k·∫øt qu·∫£ ch·∫©n ƒëo√°n"""

        # self._print_diagnosis_results(test_results)
        print("\nüìä K·∫æT QU·∫¢:")
        for mode, result in test_results:
            print(f"   [{mode}] {result}")

    def _diagnose_pop3(self):
        """Ch·∫©n ƒëo√°n k·∫øt n·ªëi POP3"""
        test_results = []
        cipher_modes = ["strict", "auto", "legacy"]

        for mode in cipher_modes:
            try:
                ctx = ssl.create_default_context()
                ctx.minimum_version = ssl.TLSVersion.TLSv1_2

                cipher_configs = {
                    "strict": "DEFAULT:@SECLEVEL=2",
                    "auto": "DEFAULT:@SECLEVEL=1",
                    "legacy": "ALL:@SECLEVEL=0",
                }
                ctx.set_ciphers(cipher_configs[mode])

                # Test k·∫øt n·ªëi POP3
                conn = poplib.POP3_SSL(
                    self.mail_host, self.mail_port, context=ctx, timeout=10
                )

                # Test login
                conn.user(self.mail_user)
                conn.pass_(self.mail_pass)
                conn.quit()

                test_results.append((mode, "‚úÖ Th√†nh c√¥ng"))
                print(f"   [{mode}] ‚úÖ K·∫øt n·ªëi th√†nh c√¥ng")

            except poplib.error_proto as e:
                error_msg = str(e)
                print(f"   [{mode}] ‚ùå L·ªói POP3: {error_msg[:60]}")

                if DEBUG_MODE:
                    print(f"        Traceback:")
                    traceback.print_exc()

                test_results.append((mode, f"‚ùå Auth Error: {error_msg[:50]}"))

            except ssl.SSLError as e:
                error_msg = str(e)
                print(f"   [{mode}] ‚ùå L·ªói SSL: {error_msg[:60]}")

                if DEBUG_MODE:
                    print(f"        Traceback:")
                    traceback.print_exc()

                test_results.append((mode, f"‚ùå SSL Error: {error_msg[:50]}"))

            except socket.timeout:
                print(f"   [{mode}] ‚ùå Timeout")
                test_results.append((mode, "‚ùå Timeout"))

            except Exception as e:
                error_msg = str(e)
                error_type = type(e).__name__
                print(f"   [{mode}] ‚ùå L·ªói {error_type}: {error_msg[:60]}")

                if DEBUG_MODE:
                    print(f"        Full traceback:")
                    traceback.print_exc()

                test_results.append((mode, f"‚ùå {error_type}: {error_msg[:40]}"))

        self._print_diagnosis_results(test_results)

        for mode in cipher_modes:
            try:
                ctx = ssl.create_default_context()
                ctx.minimum_version = ssl.TLSVersion.TLSv1_2

                cipher_configs = {
                    "strict": "DEFAULT:@SECLEVEL=2",
                    "auto": "DEFAULT:@SECLEVEL=1",
                    "legacy": "ALL:@SECLEVEL=0",
                }
                ctx.set_ciphers(cipher_configs[mode])

                with poplib.POP3_SSL(
                    self.mail_host, self.mail_port, context=ctx, timeout=10
                ) as conn:
                    conn.user(self.mail_user)
                    conn.pass_(self.mail_pass)
                    test_results.append((mode, "‚úÖ Th√†nh c√¥ng"))
                    print(f"   [{mode}] ‚úÖ K·∫øt n·ªëi th√†nh c√¥ng")

            except ssl.SSLError as e:
                test_results.append((mode, f"‚ùå SSL Error: {str(e)[:50]}"))
                print(f"   [{mode}] ‚ùå L·ªói SSL")
            except poplib.error_proto as e:
                test_results.append((mode, f"‚ùå Auth Error: {str(e)[:50]}"))
                print(f"   [{mode}] ‚ö†Ô∏è  K·∫øt n·ªëi OK nh∆∞ng l·ªói x√°c th·ª±c")
            except Exception as e:
                test_results.append((mode, f"‚ùå {str(e)[:50]}"))
                print(f"   [{mode}] ‚ùå L·ªói kh√°c")

        # T·ªïng k·∫øt
        print("\nüìä K·∫æT QU·∫¢:")
        print("-" * 60)
        for mode, result in test_results:
            print(f"   {mode:8} : {result}")

        # Khuy·∫øn ngh·ªã
        print("\nüí° KHUY·∫æN NGH·ªä:")
        successful_modes = [
            m for m, r in test_results if "Th√†nh c√¥ng" in r or "OK" in r
        ]

        if successful_modes:
            print(f"   ‚úÖ S·ª≠ d·ª•ng mode: {successful_modes[0]}")
            print(
                f"   Kh·ªüi ƒë·ªông: client = MailClient(cipher_level='{successful_modes[0]}')"
            )
        else:
            print("   ‚ùå Kh√¥ng c√≥ mode n√†o ho·∫°t ƒë·ªông")
            print("   üîß Ki·ªÉm tra:")
            print("      - Server c√≥ h·ªó tr·ª£ TLS 1.2+?")
            print("      - Firewall c√≥ ch·∫∑n port?")
            print("      - Email/password c√≥ ƒë√∫ng?")

        print("=" * 60)

    def test_raw_connection(self):
        """
        Test k·∫øt n·ªëi socket thu·∫ßn t√∫y ƒë·ªÉ ph√°t hi·ªán v·∫•n ƒë·ªÅ m·∫°ng
        """
        print("\nüîå TEST K·∫æT N·ªêI C∆† B·∫¢N")
        print("=" * 60)

        # Test 1: TCP Connection
        print(f"\n1Ô∏è‚É£  Test TCP ƒë·∫øn {self.mail_host}:{self.mail_port}...")
        try:
            sock = socket.create_connection(
                (self.mail_host, self.mail_port), timeout=10
            )
            print("   ‚úÖ K·∫øt n·ªëi TCP th√†nh c√¥ng")
            sock.close()
        except socket.timeout:
            print("   ‚ùå Timeout - Server kh√¥ng ph·∫£n h·ªìi")
            return
        except socket.gaierror:
            print("   ‚ùå Kh√¥ng th·ªÉ resolve hostname")
            return
        except ConnectionRefusedError:
            print("   ‚ùå K·∫øt n·ªëi b·ªã t·ª´ ch·ªëi - Ki·ªÉm tra port")
            return
        except Exception as e:
            print(f"   ‚ùå L·ªói: {e}")
            return

        # Test 2: SSL/TLS Handshake v·ªõi c√°c version kh√°c nhau
        print(f"\n2Ô∏è‚É£  Test SSL/TLS Handshake ({self.protocol.upper()})...")
        tls_versions = [
            (ssl.TLSVersion.TLSv1_3, "TLS 1.3"),
            (ssl.TLSVersion.TLSv1_2, "TLS 1.2"),
            (ssl.TLSVersion.TLSv1_1, "TLS 1.1"),
            (ssl.TLSVersion.TLSv1, "TLS 1.0"),
        ]

        working_versions = []
        for tls_ver, name in tls_versions:
            try:
                ctx = ssl.create_default_context()
                ctx.minimum_version = tls_ver
                ctx.maximum_version = tls_ver
                ctx.set_ciphers("ALL:@SECLEVEL=0")

                sock = socket.create_connection(
                    (self.mail_host, self.mail_port), timeout=10
                )
                ssl_sock = ctx.wrap_socket(sock, server_hostname=self.mail_host)

                print(
                    f"   ‚úÖ {name}: {ssl_sock.version()} - Cipher: {ssl_sock.cipher()[0]}"
                )
                working_versions.append(name)

                ssl_sock.close()
            except ssl.SSLError as e:
                print(f"   ‚ùå {name}: {str(e)[:60]}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  {name}: {str(e)[:60]}")

        # Test 3: Cipher Suites
        print(f"\n3Ô∏è‚É£  Test Cipher Suites...")
        cipher_tests = [
            ("DEFAULT:@SECLEVEL=2", "Modern (SECLEVEL=2)"),
            ("DEFAULT:@SECLEVEL=1", "Balanced (SECLEVEL=1)"),
            ("ALL:@SECLEVEL=0", "Legacy (SECLEVEL=0)"),
            ("ECDHE-RSA-AES128-GCM-SHA256", "Specific: ECDHE-RSA-AES128-GCM-SHA256"),
            ("AES128-SHA", "Specific: AES128-SHA"),
        ]

        working_ciphers = []
        for cipher_str, name in cipher_tests:
            try:
                ctx = ssl.create_default_context()
                ctx.minimum_version = ssl.TLSVersion.TLSv1_2
                ctx.set_ciphers(cipher_str)

                sock = socket.create_connection(
                    (self.mail_host, self.mail_port), timeout=10
                )
                ssl_sock = ctx.wrap_socket(sock, server_hostname=self.mail_host)

                actual_cipher = ssl_sock.cipher()[0]
                print(f"   ‚úÖ {name}")
                print(f"      ‚Üí Actual: {actual_cipher}")
                working_ciphers.append(name)

                ssl_sock.close()
            except ssl.SSLError as e:
                print(f"   ‚ùå {name}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  {name}: {str(e)[:40]}")

        # T·ªïng k·∫øt
        print("\n" + "=" * 60)
        print("üìã T·ªîNG K·∫æT:")
        print("-" * 60)

        if working_versions:
            print(f"‚úÖ TLS versions ho·∫°t ƒë·ªông: {', '.join(working_versions)}")
        else:
            print("‚ùå Kh√¥ng c√≥ TLS version n√†o ho·∫°t ƒë·ªông")

        if working_ciphers:
            print(f"‚úÖ Cipher suites ho·∫°t ƒë·ªông: {len(working_ciphers)}")
            # print(f"‚úÖ Khuy·∫øn ngh·ªã: D√πng {cipher_tests[working_ciphers[0]][0]}")
            print(f"‚úÖ Khuy·∫øn ngh·ªã: D√πng {working_ciphers[0]}")
        else:
            print("‚ùå Kh√¥ng c√≥ cipher suite n√†o ho·∫°t ƒë·ªông")

        print("=" * 60)

    def fetch_new_emails(self) -> int:
        """
        K·∫øt n·ªëi ƒë·∫øn server (POP3 ho·∫∑c IMAP), t·∫£i v·ªÅ v√† l∆∞u c√°c email m·ªõi

        Returns:
            S·ªë l∆∞·ª£ng email m·ªõi ƒë√£ t·∫£i
        """
        if self.protocol == "imap":
            return self._fetch_new_emails_imap()
        else:
            return self._fetch_new_emails_pop3()

    def _fetch_new_emails_imap(self) -> int:
        """
        T·∫£i email qua IMAP
        """
        new_count = 0

        try:
            # K·∫øt n·ªëi IMAP v·ªõi SSL
            with imaplib.IMAP4_SSL(
                self.mail_host, self.mail_port, ssl_context=self.ssl_context
            ) as imap_conn:
                imap_conn.login(self.mail_user, self.mail_pass)

                # Ch·ªçn INBOX
                imap_conn.select("INBOX")

                # T√¨m t·∫•t c·∫£ email ch∆∞a ƒë·ªçc (ho·∫∑c t·∫•t c·∫£)
                # D√πng 'ALL' ƒë·ªÉ l·∫•y t·∫•t c·∫£, 'UNSEEN' ƒë·ªÉ ch·ªâ l·∫•y ch∆∞a ƒë·ªçc
                status, messages = imap_conn.search(None, "ALL")

                if status != "OK":
                    print("‚ùå Kh√¥ng th·ªÉ t√¨m ki·∫øm email")
                    return 0

                email_ids = messages[0].split()

                if not email_ids:
                    print("üì≠ Kh√¥ng c√≥ email n√†o trong h·ªôp th∆∞")
                    return 0

                print(f"üì¨ T√¨m th·∫•y {len(email_ids)} email tr√™n server")

                # Duy·ªát qua t·ª´ng email
                for email_id in email_ids:
                    email_id_str = email_id.decode()

                    # Ki·ªÉm tra ƒë√£ t·∫£i ch∆∞a (d√πng email_id l√†m UID)
                    if email_id_str in self.seen_uids:
                        continue

                    # T·∫£i email
                    status, msg_data = imap_conn.fetch(email_id, "(RFC822)")

                    if status != "OK":
                        print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ t·∫£i email {email_id_str}")
                        continue

                    # Parse email
                    raw_email = msg_data[0][1]
                    msg = message_from_bytes(raw_email, policy=policy.default)

                    # Gi·∫£i m√£ th√¥ng tin
                    from_addr = self._decode_header_value(msg.get("From", ""))
                    subject = self._decode_header_value(
                        msg.get("Subject", "No Subject")
                    )
                    date = msg.get("Date", "")

                    print(f"\nüìß Email m·ªõi #{email_id_str}")
                    print(f"   T·ª´: {from_addr}")
                    print(f"   Ti√™u ƒë·ªÅ: {subject}")
                    print(f"   Ng√†y: {date}")

                    # T·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ
                    folder_name = f"{email_id_str}_{self._sanitize_filename(subject)}"

                    # Chu·∫©n h√≥a t√™n th∆∞ m·ª•c ƒë·ªÉ an to√†n tr√™n Windows/Linux
                    def _sanitize_folder_component(
                        name: str, max_len: int = 240
                    ) -> str:
                        if not name:
                            return "no_subject"

                        # Lo·∫°i b·ªè k√Ω t·ª± ƒëi·ªÅu khi·ªÉn (control chars)
                        name = "".join(ch for ch in name if ord(ch) >= 32)

                        # Thay c√°c ƒë∆∞·ªùng ph√¢n c√°ch h·ªá th·ªëng v√† k√Ω t·ª± ALT sep b·∫±ng d·∫•u g·∫°ch d∆∞·ªõi
                        name = name.replace(os.path.sep, "_")
                        if os.path.altsep:
                            name = name.replace(os.path.altsep, "_")

                        # Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng h·ª£p l·ªá chung (Windows v√† POSIX)
                        name = re.sub(r'[<>:"/\\|?*\x00-\x1f]', "_", name)

                        # Gom nhi·ªÅu kho·∫£ng tr·∫Øng th√†nh m·ªôt v√† trim ƒë·∫ßu-cu·ªëi
                        name = re.sub(r"\s+", " ", name).strip()

                        # Windows kh√¥ng cho ph√©p t√™n k·∫øt th√∫c b·∫±ng d·∫•u ch·∫•m ho·∫∑c kho·∫£ng tr·∫Øng
                        name = name.rstrip(" .")

                        # Tr√°nh c√°c t√™n reserved tr√™n Windows
                        reserved = {
                            "CON",
                            "PRN",
                            "AUX",
                            "NUL",
                            "COM1",
                            "COM2",
                            "COM3",
                            "COM4",
                            "COM5",
                            "COM6",
                            "COM7",
                            "COM8",
                            "COM9",
                            "LPT1",
                            "LPT2",
                            "LPT3",
                            "LPT4",
                            "LPT5",
                            "LPT6",
                            "LPT7",
                            "LPT8",
                            "LPT9",
                        }
                        if name.upper() in reserved or name in {".", "..", ""}:
                            name = f"_{name}"

                        # Gi·ªõi h·∫°n ƒë·ªô d√†i an to√†n (ƒëa s·ªë FS ch·∫•p nh·∫≠n ~255, gi·ªØ tr·ª´ ƒëi ph·∫ßn c√≤n l·∫°i)
                        if len(name) > max_len:
                            name = name[:max_len].rstrip(" .")

                        return name or "no_subject"

                    folder_name = _sanitize_folder_component(folder_name)
                    email_folder = self.storage_dir / folder_name
                    email_folder.mkdir(exist_ok=True)

                    # L∆∞u file .eml g·ªëc
                    eml_file = email_folder / "full_email.eml"
                    with open(eml_file, "wb") as f:
                        f.write(raw_email)

                    # Tr√≠ch xu·∫•t ƒë√≠nh k√®m
                    attachment_count = self._extract_attachments(msg, email_folder)

                    # ƒê√°nh d·∫•u ƒë√£ t·∫£i
                    self._save_seen_uid(email_id_str)
                    new_count += 1

                    # Hi·ªÉn th·ªã th√¥ng b√°o desktop
                    if PLYER_AVAILABLE:
                        try:
                            notification.notify(
                                title=f"üìß Email m·ªõi t·ª´ {from_addr[:30]}",
                                message=subject[:100],
                                app_name="Mail Client",
                                timeout=10,
                            )
                        except:
                            pass

                print(f"\n‚úÖ ƒê√£ t·∫£i v·ªÅ {new_count} email m·ªõi")

        except imaplib.IMAP4.error as e:
            print(f"‚ùå L·ªói IMAP: {e}")
        except ssl.SSLError as e:
            print(f"‚ùå L·ªói SSL: {e}")
            print("\nüîß G·ª¢I √ù KH·∫ÆC PH·ª§C:")
            print("1. Server c√≥ th·ªÉ y√™u c·∫ßu cipher suite c≈©")
            print("2. Th·ª≠ kh·ªüi ƒë·ªông l·∫°i v·ªõi: python mail_client.py legacy")
            print("3. Ki·ªÉm tra server c√≥ h·ªó tr·ª£ TLS 1.2 tr·ªü l√™n")
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")

        return new_count

    def _fetch_new_emails_pop3(self) -> int:
        """
        T·∫£i email qua POP3 (code g·ªëc)
        """
        new_count = 0

        try:
            # K·∫øt n·ªëi POP3 v·ªõi SSL
            with poplib.POP3_SSL(
                self.mail_host, self.mail_port, context=self.ssl_context
            ) as pop_conn:
                pop_conn.user(self.mail_user)
                pop_conn.pass_(self.mail_pass)

                # L·∫•y danh s√°ch email
                num_messages = len(pop_conn.list()[1])

                if num_messages == 0:
                    print("üì≠ Kh√¥ng c√≥ email n√†o tr√™n server")
                    return 0

                print(f"üì¨ T√¨m th·∫•y {num_messages} email tr√™n server")

                # Duy·ªát qua t·ª´ng email
                for i in range(1, num_messages + 1):
                    # L·∫•y UID
                    uid_response = pop_conn.uidl(i)
                    uid = uid_response.decode().split()[1]

                    # Ki·ªÉm tra ƒë√£ t·∫£i ch∆∞a
                    if uid in self.seen_uids:
                        continue

                    # T·∫£i email
                    raw_email = b"\n".join(pop_conn.retr(i)[1])
                    msg = message_from_bytes(raw_email, policy=policy.default)

                    # Gi·∫£i m√£ th√¥ng tin
                    from_addr = self._decode_header_value(msg.get("From", ""))
                    subject = self._decode_header_value(
                        msg.get("Subject", "No Subject")
                    )
                    date = msg.get("Date", "")

                    print(f"\nüìß Email m·ªõi #{i}")
                    print(f"   T·ª´: {from_addr}")
                    print(f"   Ti√™u ƒë·ªÅ: {subject}")
                    print(f"   Ng√†y: {date}")

                    # T·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ
                    folder_name = f"{uid}_{self._sanitize_filename(subject)}"
                    email_folder = self.storage_dir / folder_name
                    email_folder.mkdir(exist_ok=True)

                    # L∆∞u file .eml g·ªëc
                    eml_file = email_folder / "full_email.eml"
                    with open(eml_file, "wb") as f:
                        f.write(raw_email)

                    # Tr√≠ch xu·∫•t ƒë√≠nh k√®m
                    attachment_count = self._extract_attachments(msg, email_folder)

                    # ƒê√°nh d·∫•u ƒë√£ t·∫£i
                    self._save_seen_uid(uid)
                    new_count += 1

                    # Hi·ªÉn th·ªã th√¥ng b√°o desktop
                    if PLYER_AVAILABLE:
                        try:
                            notification.notify(
                                title=f"üìß Email m·ªõi t·ª´ {from_addr[:30]}",
                                message=subject[:100],
                                app_name="Mail Client",
                                timeout=10,
                            )
                        except:
                            pass  # B·ªè qua n·∫øu th√¥ng b√°o th·∫•t b·∫°i

                print(f"\n‚úÖ ƒê√£ t·∫£i v·ªÅ {new_count} email m·ªõi")

        except poplib.error_proto as e:
            print(f"‚ùå L·ªói POP3: {e}")
        except ssl.SSLError as e:
            print(f"‚ùå L·ªói SSL: {e}")
            print("\nüîß G·ª¢I √ù KH·∫ÆC PH·ª§C:")
            print("1. Server c√≥ th·ªÉ y√™u c·∫ßu cipher suite c≈©")
            print(
                "2. Th·ª≠ kh·ªüi ƒë·ªông l·∫°i v·ªõi: client = MailClient(cipher_level='legacy')"
            )
            print("3. Ki·ªÉm tra server c√≥ h·ªó tr·ª£ TLS 1.2 tr·ªü l√™n")
            print("4. Xem log chi ti·∫øt: openssl s_client -connect <host>:<port>")
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")

        return new_count

    def read_saved_emails(self):
        """
        Hi·ªÉn th·ªã danh s√°ch email ƒë√£ l∆∞u v√† cho ph√©p ƒë·ªçc chi ti·∫øt
        """
        # L·∫•y danh s√°ch th∆∞ m·ª•c email
        email_folders = sorted([d for d in self.storage_dir.iterdir() if d.is_dir()])

        if not email_folders:
            print("\nüì≠ Ch∆∞a c√≥ email n√†o ƒë∆∞·ª£c l∆∞u offline")
            return

        print(f"\nüìö Danh s√°ch {len(email_folders)} email ƒë√£ l∆∞u:")
        print("=" * 80)

        # Hi·ªÉn th·ªã danh s√°ch
        for idx, folder in enumerate(email_folders, 1):
            eml_file = folder / "full_email.eml"

            if eml_file.exists():
                try:
                    with open(eml_file, "rb") as f:
                        msg = message_from_bytes(f.read(), policy=policy.default)

                    from_addr = self._decode_header_value(msg.get("From", "Unknown"))
                    subject = self._decode_header_value(
                        msg.get("Subject", "No Subject")
                    )
                    date = msg.get("Date", "")

                    print(f"\n[{idx}] {subject}")
                    print(f"    T·ª´: {from_addr}")
                    print(f"    Ng√†y: {date}")

                except Exception as e:
                    print(f"\n[{idx}] {folder.name}")
                    print(f"    ‚ö†Ô∏è  L·ªói ƒë·ªçc file: {e}")

        print("\n" + "=" * 80)

        # Cho ph√©p ch·ªçn email ƒë·ªÉ ƒë·ªçc chi ti·∫øt
        while True:
            choice = input("\nNh·∫≠p s·ªë th·ª© t·ª± email mu·ªën ƒë·ªçc (0 ƒë·ªÉ quay l·∫°i): ").strip()

            if choice == "0":
                break

            try:
                idx = int(choice)
                if 1 <= idx <= len(email_folders):
                    self._display_email_detail(email_folders[idx - 1])
                else:
                    print("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë")

    def _display_email_detail(self, folder: Path):
        """
        Hi·ªÉn th·ªã chi ti·∫øt n·ªôi dung m·ªôt email
        """
        eml_file = folder / "full_email.eml"

        try:
            with open(eml_file, "rb") as f:
                msg = message_from_bytes(f.read(), policy=policy.default)

            from_addr = self._decode_header_value(msg.get("From", ""))
            to_addr = self._decode_header_value(msg.get("To", ""))
            subject = self._decode_header_value(msg.get("Subject", ""))
            date = msg.get("Date", "")
            body = self._get_email_body(msg)

            print("\n" + "=" * 80)
            print("üìß CHI TI·∫æT EMAIL")
            print("=" * 80)
            print(f"T·ª´: {from_addr}")
            print(f"ƒê·∫øn: {to_addr}")
            print(f"Ti√™u ƒë·ªÅ: {subject}")
            print(f"Ng√†y: {date}")
            print("-" * 80)
            print("N·ªòI DUNG:")
            print("-" * 80)
            print(body)

            # Li·ªát k√™ file ƒë√≠nh k√®m
            attachments = [f for f in folder.iterdir() if f.name != "full_email.eml"]

            if attachments:
                print("-" * 80)
                print(f"üìé FILE ƒê√çNH K√àM ({len(attachments)}):")
                for att in attachments:
                    size_kb = att.stat().st_size / 1024
                    print(f"   ‚Ä¢ {att.name} ({size_kb:.1f} KB)")

            print("=" * 80)

        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc email: {e}")

    def auto_monitor(self, interval: int = 300):
        """
        Ch·∫ø ƒë·ªô gi√°m s√°t t·ª± ƒë·ªông, ki·ªÉm tra email m·ªõi theo chu k·ª≥

        Args:
            interval: Th·ªùi gian gi·ªØa c√°c l·∫ßn ki·ªÉm tra (gi√¢y), m·∫∑c ƒë·ªãnh 5 ph√∫t
        """
        print(f"\nüîÑ B·∫Øt ƒë·∫ßu gi√°m s√°t t·ª± ƒë·ªông (ki·ªÉm tra m·ªói {interval//60} ph√∫t)")
        print("   Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng\n")

        try:
            while True:
                current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                print(f"[{current_time}] ƒêang ki·ªÉm tra email m·ªõi...")

                new_count = self.fetch_new_emails()

                if new_count == 0:
                    print(
                        f"   Kh√¥ng c√≥ email m·ªõi. Ki·ªÉm tra l·∫°i sau {interval//60} ph√∫t."
                    )

                time.sleep(interval)

        except KeyboardInterrupt:
            print("\n\n‚èπÔ∏è  ƒê√£ d·ª´ng gi√°m s√°t t·ª± ƒë·ªông")

    def run(self):
        """
        Ch·∫°y ·ª©ng d·ª•ng v·ªõi menu CLI t∆∞∆°ng t√°c
        """
        while True:
            print("\n" + "=" * 60)
            print("üìÆ MAIL CLIENT - MENU CH√çNH")
            print("=" * 60)
            print("1. üì§ G·ª≠i email m·ªõi")
            print("2. üì• Ki·ªÉm tra v√† t·∫£i email m·ªõi")
            print("3. üìñ ƒê·ªçc email ƒë√£ l∆∞u (Offline)")
            print("4. üîÑ B·∫Øt ƒë·∫ßu gi√°m s√°t t·ª± ƒë·ªông")
            print("5. üîç Ch·∫©n ƒëo√°n k·∫øt n·ªëi SSL (Nhanh)")
            print("6. üî¨ Test k·∫øt n·ªëi chi ti·∫øt (N√¢ng cao)")
            print("7. üö™ Tho√°t")
            print("=" * 60)

            choice = input("\nCh·ªçn ch·ª©c nƒÉng (1-7): ").strip()

            if choice == "1":
                self._send_email_interactive()
            elif choice == "2":
                print("\nüì• ƒêang ki·ªÉm tra email m·ªõi...")
                self.fetch_new_emails()
            elif choice == "3":
                self.read_saved_emails()
            elif choice == "4":
                self.auto_monitor()
            elif choice == "5":
                self.diagnose_ssl_connection()
            elif choice == "6":
                self.test_raw_connection()
            elif choice == "7":
                print("\nüëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Mail Client!")
                break
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")

    def _send_email_interactive(self):
        """
        Giao di·ªán t∆∞∆°ng t√°c ƒë·ªÉ g·ª≠i email
        """
        print("\nüì§ SO·∫†N EMAIL M·ªöI")
        print("-" * 60)

        to_addr = input("ƒê·∫øn (email): ").strip()
        if not to_addr:
            print("‚ùå ƒê·ªãa ch·ªâ email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            return

        subject = input("Ti√™u ƒë·ªÅ: ").strip()

        print("N·ªôi dung (nh·∫≠p d√≤ng tr·ªëng ƒë·ªÉ k·∫øt th√∫c):")
        body_lines = []
        while True:
            line = input()
            if line == "":
                break
            body_lines.append(line)
        body = "\n".join(body_lines)

        # X·ª≠ l√Ω ƒë√≠nh k√®m
        attachments = []
        while True:
            att = input("ƒê∆∞·ªùng d·∫´n file ƒë√≠nh k√®m (Enter ƒë·ªÉ b·ªè qua): ").strip()
            if not att:
                break
            attachments.append(att)

        # G·ª≠i email
        self.send_email(to_addr, subject, body, attachments if attachments else None)


def main():
    """
    H√†m main ƒë·ªÉ kh·ªüi ch·∫°y ·ª©ng d·ª•ng v·ªõi error handling to√†n di·ªán
    """
    print("=" * 60)
    print("üöÄ MAIL CLIENT APPLICATION v2.0.0")
    print("=" * 60)

    if DEBUG_MODE:
        print("üîç DEBUG MODE: ENABLED")
        print("=" * 60)

    # Ki·ªÉm tra file .env
    if not os.path.exists(".env"):
        print("\n‚ùå Kh√¥ng t√¨m th·∫•y file .env")
        print("\nVui l√≤ng t·∫°o file .env v·ªõi n·ªôi dung:")
        print("-" * 60)
        print("MAIL_HOST=your.mail.server.com")
        print("MAIL_PORT=993")
        print("SMTP_SERVER=your.smtp.server.com")
        print("SMTP_PORT=465")
        print("MAIL_USER=your_email@example.com")
        print("MAIL_PASS=your_password")
        print("-" * 60)
        print("\nüí° Tips:")
        print("   - Port 993: IMAP SSL")
        print("   - Port 995: POP3 SSL")
        print("   - Port 143: IMAP")
        print("   - Port 110: POP3")
        return

    try:
        # C√≥ th·ªÉ truy·ªÅn tham s·ªë cipher_level khi kh·ªüi t·∫°o
        import sys

        cipher_level = sys.argv[1] if len(sys.argv) > 1 else "auto"

        if cipher_level not in ["auto", "strict", "legacy"]:
            print(f"‚ö†Ô∏è  Cipher level '{cipher_level}' kh√¥ng h·ª£p l·ªá")
            print("   S·ª≠ d·ª•ng: auto, strict, ho·∫∑c legacy")
            print("   M·∫∑c ƒë·ªãnh: auto")
            cipher_level = "auto"

        print(f"\nüîê ƒêang kh·ªüi t·∫°o v·ªõi cipher level: {cipher_level}")

        client = MailClient(cipher_level=cipher_level)
        client.run()

    except ValueError as e:
        log_error("L·ªói c·∫•u h√¨nh", e, show_trace=False)
        print("\nüí° G·ª£i √Ω:")
        print("   1. Ki·ªÉm tra file .env c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin")
        print("   2. ƒê·∫£m b·∫£o c√°c gi√° tr·ªã kh√¥ng c√≥ d·∫•u c√°ch th·ª´a")
        print("   3. Port ph·∫£i l√† s·ªë")

    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Ng∆∞·ªùi d√πng ƒë√£ d·ª´ng ch∆∞∆°ng tr√¨nh")

    except RecursionError as e:
        log_error("L·ªói ƒë·ªá quy v√¥ h·∫°n", e)
        print("\nüêõ Debug Info:")
        print("   C√≥ v·∫ª nh∆∞ code b·ªã l·ªói logic g√¢y ƒë·ªá quy")
        print("   Vui l√≤ng b√°o l·ªói n√†y cho developer")

    except Exception as e:
        log_error("L·ªói kh√¥ng x√°c ƒë·ªãnh", e)
        print("\nüí° G·ª£i √Ω:")
        print("   1. B·∫≠t DEBUG_MODE ƒë·ªÉ xem chi ti·∫øt:")
        print("      export DEBUG_MODE=true")
        print("      python mail_client.py")
        print("   2. Ki·ªÉm tra k·∫øt n·ªëi internet")
        print("   3. Ki·ªÉm tra file .env")


if __name__ == "__main__":
    main()
