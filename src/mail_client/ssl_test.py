#!/usr/bin/env python3
"""
SSL Connection Test Script
Script ƒë·ªôc l·∫≠p ƒë·ªÉ test k·∫øt n·ªëi SSL/TLS ƒë·∫øn mail server

S·ª≠ d·ª•ng: python ssl_test.py [host] [port]
V√≠ d·ª•: python ssl_test.py pop.gmail.com 995
"""

import ssl
import socket
import sys
from datetime import datetime


def print_header(title):
    """In header ƒë·∫πp"""
    print("\n" + "=" * 70)
    print(f" {title}")
    print("=" * 70)


def test_tcp_connection(host, port):
    """Test k·∫øt n·ªëi TCP c∆° b·∫£n"""
    print_header("1. TEST K·∫æT N·ªêI TCP")

    try:
        start = datetime.now()
        sock = socket.create_connection((host, port), timeout=10)
        elapsed = (datetime.now() - start).total_seconds()

        print(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn {host}:{port}")
        print(f"‚è±Ô∏è  Th·ªùi gian: {elapsed:.2f}s")

        # L·∫•y th√¥ng tin ƒë·ªãa ch·ªâ
        peer = sock.getpeername()
        print(f"üìç Server IP: {peer[0]}:{peer[1]}")

        sock.close()
        return True

    except socket.timeout:
        print(f"‚ùå TIMEOUT - Server kh√¥ng ph·∫£n h·ªìi sau 10s")
        return False
    except socket.gaierror as e:
        print(f"‚ùå KH√îNG TH·ªÇ RESOLVE HOSTNAME")
        print(f"   L·ªói: {e}")
        return False
    except ConnectionRefusedError:
        print(f"‚ùå K·∫æT N·ªêI B·ªä T·ª™ CH·ªêI")
        print(f"   Port {port} c√≥ th·ªÉ kh√¥ng m·ªü ho·∫∑c firewall ch·∫∑n")
        return False
    except Exception as e:
        print(f"‚ùå L·ªñI: {e}")
        return False


def test_ssl_versions(host, port):
    """Test c√°c phi√™n b·∫£n SSL/TLS"""
    print_header("2. TEST C√ÅC PHI√äN B·∫¢N TLS")

    versions = [
        (ssl.TLSVersion.TLSv1_3, "TLS 1.3", "M·ªõi nh·∫•t, b·∫£o m·∫≠t cao nh·∫•t"),
        (ssl.TLSVersion.TLSv1_2, "TLS 1.2", "Ti√™u chu·∫©n hi·ªán t·∫°i"),
        (ssl.TLSVersion.TLSv1_1, "TLS 1.1", "Deprecated - Kh√¥ng n√™n d√πng"),
        (ssl.TLSVersion.TLSv1, "TLS 1.0", "Deprecated - C√≥ l·ªó h·ªïng b·∫£o m·∫≠t"),
    ]

    working_versions = []

    for tls_enum, name, desc in versions:
        try:
            ctx = ssl.create_default_context()
            ctx.minimum_version = tls_enum
            ctx.maximum_version = tls_enum
            ctx.set_ciphers("ALL:@SECLEVEL=0")  # Cho ph√©p t·∫•t c·∫£ ƒë·ªÉ test

            sock = socket.create_connection((host, port), timeout=10)
            ssl_sock = ctx.wrap_socket(sock, server_hostname=host)

            cipher_info = ssl_sock.cipher()
            cert = ssl_sock.getpeercert()

            print(f"\n‚úÖ {name}")
            print(f"   üìù {desc}")
            print(f"   üîê Cipher: {cipher_info[0]}")
            print(f"   üìä Bits: {cipher_info[2]}")
            print(f"   üìú Protocol: {ssl_sock.version()}")

            if cert:
                subject = dict(x[0] for x in cert["subject"])
                print(f"   üìÑ Cert CN: {subject.get('commonName', 'N/A')}")

            working_versions.append(name)
            ssl_sock.close()

        except ssl.SSLError as e:
            print(f"\n‚ùå {name}")
            print(f"   üìù {desc}")
            print(f"   ‚ö†Ô∏è  L·ªói: {str(e)[:70]}")
        except Exception as e:
            print(f"\n‚ö†Ô∏è  {name}: {str(e)[:70]}")

    if working_versions:
        print(f"\nüí° Server h·ªó tr·ª£: {', '.join(working_versions)}")
        return working_versions
    else:
        print("\n‚ùå Server kh√¥ng h·ªó tr·ª£ b·∫•t k·ª≥ TLS version n√†o")
        return []


def test_cipher_suites(host, port):
    """Test c√°c cipher suite"""
    print_header("3. TEST CIPHER SUITES")

    cipher_configs = [
        (
            "DEFAULT:@SECLEVEL=2",
            "Modern (SECLEVEL=2)",
            "Ch·ªâ cipher m·∫°nh: RSA 2048+, No SHA1",
        ),
        (
            "DEFAULT:@SECLEVEL=1",
            "Balanced (SECLEVEL=1)",
            "C√¢n b·∫±ng: RSA 1024+, SHA1 trong signatures",
        ),
        ("ALL:@SECLEVEL=0", "Legacy (SECLEVEL=0)", "T·∫•t c·∫£ cipher, k·ªÉ c·∫£ y·∫øu"),
        (
            "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256",
            "ECDHE Only",
            "Ch·ªâ Elliptic Curve",
        ),
        ("AES128-SHA:AES256-SHA", "AES-SHA Only", "RSA v·ªõi AES-SHA (c≈©)"),
    ]

    working_configs = []

    for cipher_str, name, desc in cipher_configs:
        try:
            ctx = ssl.create_default_context()
            ctx.minimum_version = ssl.TLSVersion.TLSv1_2
            ctx.set_ciphers(cipher_str)

            sock = socket.create_connection((host, port), timeout=10)
            ssl_sock = ctx.wrap_socket(sock, server_hostname=host)

            cipher_info = ssl_sock.cipher()

            print(f"\n‚úÖ {name}")
            print(f"   üìù {desc}")
            print(f"   üîê Cipher ƒë∆∞·ª£c ch·ªçn: {cipher_info[0]}")
            print(f"   üìä Bits: {cipher_info[2]}")
            print(f"   üîß Config: {cipher_str[:50]}...")

            working_configs.append((name, cipher_str))
            ssl_sock.close()

        except ssl.SSLError as e:
            print(f"\n‚ùå {name}")
            print(f"   üìù {desc}")
            error_msg = str(e)
            if "HANDSHAKE_FAILURE" in error_msg:
                print(f"   ‚ö†Ô∏è  Server t·ª´ ch·ªëi cipher suite n√†y")
            else:
                print(f"   ‚ö†Ô∏è  L·ªói: {error_msg[:70]}")
        except Exception as e:
            print(f"\n‚ö†Ô∏è  {name}: {str(e)[:70]}")

    return working_configs


def test_certificate(host, port):
    """Ki·ªÉm tra th√¥ng tin certificate"""
    print_header("4. TH√îNG TIN CERTIFICATE")

    try:
        ctx = ssl.create_default_context()
        ctx.set_ciphers("DEFAULT:@SECLEVEL=1")

        sock = socket.create_connection((host, port), timeout=10)
        ssl_sock = ctx.wrap_socket(sock, server_hostname=host)

        cert = ssl_sock.getpeercert()

        if cert:
            print(f"\nüìú Certificate Info:")

            # Subject
            subject = dict(x[0] for x in cert.get("subject", []))
            print(f"\n   Common Name (CN): {subject.get('commonName', 'N/A')}")
            print(f"   Organization: {subject.get('organizationName', 'N/A')}")

            # Issuer
            issuer = dict(x[0] for x in cert.get("issuer", []))
            print(f"\n   Issuer: {issuer.get('commonName', 'N/A')}")
            print(f"   Issuer Org: {issuer.get('organizationName', 'N/A')}")

            # Validity
            print(f"\n   Valid From: {cert.get('notBefore', 'N/A')}")
            print(f"   Valid To: {cert.get('notAfter', 'N/A')}")

            # Subject Alternative Names
            san = cert.get("subjectAltName", [])
            if san:
                print(f"\n   Subject Alternative Names:")
                for typ, val in san[:5]:  # Ch·ªâ hi·ªán 5 ƒë·∫ßu
                    print(f"      ‚Ä¢ {val}")
                if len(san) > 5:
                    print(f"      ... v√† {len(san)-5} n·ªØa")
        else:
            print("‚ö†Ô∏è  Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin certificate")

        ssl_sock.close()
        return True

    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y certificate: {e}")
        return False


def generate_recommendations(working_versions, working_ciphers):
    """ƒê∆∞a ra khuy·∫øn ngh·ªã"""
    print_header("5. KHUY·∫æN NGH·ªä")

    if not working_versions:
        print("\n‚ùå KH√îNG TH·ªÇ K·∫æT N·ªêI")
        print("\nüîß C√°c b∆∞·ªõc ki·ªÉm tra:")
        print("   1. Ki·ªÉm tra firewall/antivirus")
        print("   2. Th·ª≠ t·ª´ m·∫°ng kh√°c")
        print("   3. X√°c nh·∫≠n host v√† port ƒë√∫ng")
        print("   4. Li√™n h·ªá admin server")
        return

    print("\n‚úÖ K·∫æT N·ªêI TH√ÄNH C√îNG")

    # Khuy·∫øn ngh·ªã TLS version
    print("\nüìå TLS Version:")
    if "TLS 1.3" in working_versions or "TLS 1.2" in working_versions:
        print("   ‚úÖ Server h·ªó tr·ª£ TLS hi·ªán ƒë·∫°i")
        print("   üí° S·ª≠ d·ª•ng: ctx.minimum_version = ssl.TLSVersion.TLSv1_2")
    else:
        print("   ‚ö†Ô∏è  Server ch·ªâ h·ªó tr·ª£ TLS c≈© (1.0/1.1)")
        print("   üí° C√¢n nh·∫Øc n√¢ng c·∫•p server")

    # Khuy·∫øn ngh·ªã Cipher Suite
    if working_ciphers:
        print("\nüìå Cipher Suite:")

        best_config = working_ciphers[0]
        print(f"   ‚úÖ Khuy·∫øn ngh·ªã: {best_config[0]}")
        print(f"   üîß Code Python:")
        print(f"      ctx.set_ciphers('{best_config[1]}')")

        if len(working_ciphers) > 1:
            print(f"\n   üìã C√°c l·ª±a ch·ªçn kh√°c ({len(working_ciphers)-1}):")
            for name, _ in working_ciphers[1:3]:
                print(f"      ‚Ä¢ {name}")

    # Khuy·∫øn ngh·ªã cho Mail Client
    print("\nüìå Cho Mail Client App:")

    if any("Modern" in c[0] or "Balanced" in c[0] for c in working_ciphers):
        print("   ‚úÖ python mail_client.py auto")
        print("      (Ho·∫∑c strict n·∫øu mu·ªën b·∫£o m·∫≠t cao h∆°n)")
    elif any("Legacy" in c[0] for c in working_ciphers):
        print("   ‚ö†Ô∏è  python mail_client.py legacy")
        print("      (Server y√™u c·∫ßu cipher c≈©)")
    else:
        print("   üîß C√≥ th·ªÉ c·∫ßn c·∫•u h√¨nh t√πy ch·ªânh")


def main():
    """Main function"""
    print("=" * 70)
    print(" SSL/TLS CONNECTION TEST TOOL")
    print(" Version 1.0.0")
    print("=" * 70)

    # L·∫•y tham s·ªë
    if len(sys.argv) >= 3:
        host = sys.argv[1]
        port = int(sys.argv[2])
    else:
        print("\nS·ª≠ d·ª•ng: python ssl_test.py [host] [port]")
        print("\nV√≠ d·ª•:")
        print("  python ssl_test.py pop.gmail.com 995")
        print("  python ssl_test.py smtp.gmail.com 465")
        print("  python ssl_test.py outlook.office365.com 995")

        host = input("\nNh·∫≠p hostname: ").strip()
        if not host:
            print("‚ùå Hostname kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            return

        port_input = input("Nh·∫≠p port (995 cho POP3-SSL): ").strip()
        try:
            port = int(port_input) if port_input else 995
        except ValueError:
            print("‚ùå Port ph·∫£i l√† s·ªë")
            return

    print(f"\nüéØ Target: {host}:{port}")
    print(f"‚è∞ Started: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # Ch·∫°y c√°c test
    tcp_ok = test_tcp_connection(host, port)

    if not tcp_ok:
        print("\n‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi TCP. D·ª´ng test.")
        return

    working_versions = test_ssl_versions(host, port)
    working_ciphers = test_cipher_suites(host, port)
    test_certificate(host, port)
    generate_recommendations(working_versions, working_ciphers)

    print("\n" + "=" * 70)
    print(f" ‚è∞ Finished: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 70)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Test b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"\n\n‚ùå L·ªói kh√¥ng mong ƒë·ª£i: {e}")
        import traceback

        traceback.print_exc()
